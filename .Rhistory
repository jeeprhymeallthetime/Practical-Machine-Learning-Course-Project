setwd("~/GitHub/ExploreData-Course-Project-1")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
setwd("~/GitHub/ExploreData-Course-Project-1")
df <- read.csv("pml-training.csv", header = true)
setwd("~/GitHub/Practical-Machine-Learning-Course-Project")
df <- read.csv("pml-training.csv", header = true)
df <- read.csv("pml-training.csv", header = TRUE)
colnames(df)
summary(df)
segmentationOriginal
df <- segmentationOriginal
colnames(df)
head(df)
remove(df)
df
df <- segmentationOriginal
df
summary(df)
help(createDataPartition)
colnames(df)
index <- createDataPartition(df$Case, p = 0.8, times = 1, list = FALSE)
index
-index
training <- df[index,]
training
training <- df[index,]
index
length(training)
df[2019]
df[2019,]
df[2019,4]
training[119,4]
training[120,4]
training[118,4]
df[2018,4]
colnames(df)
colnames(df
)
index
head(index)
class(index)
training <- df[index,]
testing <- df[-index,]
testing
testing[,1]
set.seed(125)
colnames(training)
predictors <- training[,-2]
colnames(predictors)
predictors <- training[-2,]
colnames(predictors)
predictors <- training[,1,3:119]
colnames(predictors)
predictors <- training[,3:119]
colnames(predictors)
predictors <- training[,(1,3:119)]
predictors <- training[,!colnames(training) == "Case"]
colnames(predictors)
predictors
predictors <- training[,!colnames(training) == "Case"]
case <- training[,colnames(training) == "Case"]
case
summary(training[,1:3])
treebag <- bag(predictors, case, B = 10, bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
library(party)
install.packages("party")
treebag <- bag(predictors, case, B = 10, bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
treebag
help(rpart)
formula(Case ~ colnames(predictors))
formula
colnames(predictors)
help(train)
modFit <- train(Case ~ ., data = training, method="rf", prox=TRUE)
modFit
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Case
table(pred,testing$Case)
c(x=3,y=7)
c(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2 )
c(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
predict(modFit,c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 ))
cee <- data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
cee
predict(modFit,cee)
colnames(training)
cee <- data.frame(TotalIntenCh2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
predict(modFit,cee)
cee <- data.frame(TotalIntenCh2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
predict(modFit,newdata=cee)
predict(modFit, newdata=cee)
class(modFit)
model <-rpart(Case ~ ., data = training)
library(e1071)
model <-rpart(Case ~ ., data = training)
model <- rpart(Case ~ ., data = training)
library(caret)
library(e1071)
model <- rpart(Case ~ ., data = training)
library(randomForest)
model <- rpart(Case ~ ., data = training)
model <- rpart(Case ~ ., data = training, method="class")
library(rpart)
model <- rpart(Case ~ ., data = training, method="class")
pd <- predict(model, testing, type="vector")
acc <- pd==testing$Case
summary(acc)
model
predict(model,cee)
cee
model
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(e1071)
library(randomForest)
df <- segmentationOriginal
index <- createDataPartition(df$Case, p = 0.8, times = 1, list = FALSE)
training <- df[index,]
testing <- df[-index,]
set.seed(125)
modFit <- train(Case ~ ., data = training, method="rf")
modFit
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Case
table(pred,testing$Case)
acc <- pd==testing$Case
summary(acc)
acc <- pred==testing$Case
summary(acc)
modFit <- train(Class ~ ., data = training, method="rf", prox=TRUE)
modFit
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Class
table(pred,testing$Class)
acc <- pred==testing$Class
summary(acc)
cee <- data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
source('~/GitHub/Practical-Machine-Learning-Course-Project/quiz runs.R')
modFit
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Class
table(pred,testing$Class)
acc <- pred==testing$Class
summary(acc)
df <- segmentationOriginal
index <- createDataPartition(df$Case, p = 0.8, times = 1, list = FALSE)
training <- df[index,]
testing <- df[-index,]
set.seed(125)
modFit <- train(Class ~ ., data = training, method="rpart")
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Class
table(pred,testing$Class)
acc <- pred==testing$Class
summary(acc)
modFit <- train(Class ~ ., data = training, method="rpart")
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Class
table(pred,testing$Class)
acc <- pred==testing$Class
summary(acc)
cee <- data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
predict(modFit, newdata=cee)
cf <- df[,0]
cf
cf <- df[0,
]
cf
cf <-  rbind(cf,cee)
cf
cf <- df[0,]
cf$TotalIntenCh2[1]=23000
cf$TotalIntenCh2=23000
cf <- df[1,]
cf
cf$TotalIntenCh2[1]=23000
cf
cf$FiberWidthCh1[1]=10
cf$PerimStatusCh1[1]=2
cf
pred <- predict(modFit, cf)
pred
cf$TotalIntenCh2[1]=50000
cf$FiberWidthCh1[1]=10
cf$PerimStatusCh1[1]=100
pred <- predict(modFit, cf)
pred
cf[1,]=0
cf$TotalIntenCh2[1]=50000
cf$FiberWidthCh1[1]=10
cf$VarIntenCh4[1]=100
pred <- predict(modFit, cf)
pred
cf$TotalIntenCh2[1]=23000
cf$FiberWidthCh1[1]=10
cf$PerimStatusCh1[1]=2
pred <- predict(modFit, cf)
pred
cf <- df[1,]
cf$TotalIntenCh2[1]=23000
cf$FiberWidthCh1[1]=10
cf$PerimStatusCh1[1]=2
pred <- predict(modFit, cf)
pred
cf$TotalIntenCh2[1]=50000
cf$FiberWidthCh1[1]=10
cf$VarIntenCh4[1]=100
pred <- predict(modFit, cf)
pred
cf <- df[1,]
cf$TotalIntenCh2[1]=50000
cf$FiberWidthCh1[1]=10
cf$VarIntenCh4[1]=100
pred <- predict(modFit, cf)
pred
plot(modFit)
plot(modFit$finalModel)
modFit$finalModel
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rpart)
fancyRpartPlot(modFit$finalModel)
modFit <- train(Class ~ ., data = training, method="rpart")
fancyRpartPlot(modFit$finalModel)
library(rpart.plot)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Class
table(pred,testing$Class)
acc <- pred==testing$Class
summary(acc)
set.seed(125)
modFit <- train(Class ~ ., data = training, method="rpart")
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Class
table(pred,testing$Class)
modFit$finalModel
set.seed(125)
index <- createDataPartition(df$Case, p = 0.8, times = 1, list = FALSE)
training <- df[index,]
testing <- df[-index,]
modFit <- train(Class ~ ., data = df, method="rpart")
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Class
table(pred,testing$Class)
acc <- pred==testing$Class
summary(acc)
fancyRpartPlot(modFit$finalModel)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
summary(olive)
df <- olive
index <- createDataPartition(df$Area, p = 0.8, times = 1, list = FALSE)
training <- df[index,]
testing <- df[-index,]
modFit <- train(Area ~ ., data = df, method="rpart")
df
modFit <- train(Area ~ ., data = training, method="rpart")
df <- segmentationOriginal
set.seed(125)
index <- createDataPartition(df$Case, p = 0.8, times = 1, list = FALSE)
training <- df[index,]
testing <- df[-index,]
modFit <- train(Class ~ ., data = training, method="rpart")
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Class
table(pred,testing$Class)
acc <- pred==testing$Class
summary(acc)
fancyRpartPlot(modFit$finalModel)
df <- olive
set.seed(125)
index <- createDataPartition(df$Area, p = 0.8, times = 1, list = FALSE)
training <- df[index,]
testing <- df[-index,]
modFit <- train(Area ~ ., data = training, method="rpart")
modFit
modFit$finalPrect
colnames(modFit)
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Area
table(pred,testing$Area)
acc <- pred==testing$Class
summary(acc)
fancyRpartPlot(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
newdata
pred <- predict(modFit, newdata)
pred
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
set.seed()
set.seed(13234)
set.seed(13234)
df <- SAheart
colnames(df)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method="glm", family="binomial")
modFit
modFit$finalModel
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method="glm", family="binomial")
pred <- predict(modFit, testSA)
testSA$predRight <- pred==testSA$chd
table(pred,testSA$chd)
pred
View(trainSA)
tab <- table(pred,testSA$chd)
1-sum(diag(tab))/sum(tab)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,pred)
missClass(testSA$chd,pred)
pred <- predict(modFit, trainSA)
missClass(trainSA$chd,pred)
data(vowel.train)
data(vowel.test)
vowel.train
colnames(vowel,train)
colnames(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., data = vowel.train, method="rf")
summary(modFit)
varImp(modFit)
View(segmentationOriginal)
df <- segmentationOriginal
set.seed(125)
index <- createDataPartition(df$Case, p = 0.8, times = 1, list = FALSE)
training <- df[index,]
testing <- df[-index,]
modFit <- train(Class ~ ., data = training, method="rpart")
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Class
table(pred,testing$Class)
acc <- pred==testing$Class
summary(acc)
fancyRpartPlot(modFit$finalModel)
df <- segmentationOriginal
set.seed(125)
index <- createDataPartition(df$Case, p = 0.5, times = 1, list = FALSE)
training <- df[index,]
testing <- df[-index,]
modFit <- train(Class ~ ., data = training, method="rpart")
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Class
table(pred,testing$Class)
acc <- pred==testing$Class
summary(acc)
fancyRpartPlot(modFit$finalModel)
